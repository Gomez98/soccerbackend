type Query {
    getStudent(id: ID): Student
    allStudentRoles: [StudentRoles]
    allStudents(search: SearchInput): [Student]
    allPayments(search: SearchInput): [Payment]
    allDues(search: SearchInput): [Due]
    allWorkshops(search: SearchInput): [Workshop]
    allRepresentatives(search: SearchInput): [Representative]
    allRegistrations(search: SearchInput): [Registration]
    allUsers(search: SearchInput): [User]
    tokenIsValid(token: String): Boolean
}

type Mutation {
    addStudent(student: StudentInput): Student
    updateStudent(student: StudentInput): Student
    addWorkshop(workshop: WorkshopInput): Workshop
    updateWorkshop(workshop: WorkshopInput): Workshop
    addRepresentative(representative: RepresentativeInput): Representative
    updateRepresentative(representative: RepresentativeInput): Representative
    addRegistration(registration: RegistrationInput): Registration
    addUser(user: UserInput): User
    updateUser(user: UserInput): User
    allDuesByStudentId(studentId: String): [Due]
    payDues(dueIds: [String]):[Due]
    registerUser(register: RegisterInput): AuthenticationResponse
    authenticate(authentication: AuthenticationInput): AuthenticationResponse
    refreshToken: AuthenticationResponse
    logout(token: String): Boolean
    addPayment(payment: PaymentInput): Payment
}

type Register {
    firstName: String
    lastName: String
    email: String
    password: String
    role: String
}

type Student {
    id: ID
    createdAt: String
    modifiedAt: String
    modifiedBy: String
    deleted: Boolean
    firstName: String
    lastName: String
    fullName: String
    age: Int
    dni: String
    email: String
}

type Authentication {
    email: String
    password: String
}

type AuthenticationResponse {
    accessToken: String
    refreshToken: String
}

type StudentRoles {
    id: ID
    name: String
}
type Representative {
    id: ID
    name: String
    studentName: String
}

type Payment {
    id: ID
    studentId: String
    studentName: String
    mode: String
    amount: Float
}

type Workshop {
    id: ID
    name: String
    schedule: [String]
    price: Float
}

type Registration {
    id: ID
    student: Student
    workshopName: String
    schedule: String
}

type User {
    id: ID
    firstName: String
    lastName: String
    email: String
    role: String
    password: String

}
type Due {
    id: ID
    studentId: String
    amount: Float
    name: String
    status: String
    creationDate: String
    dueDate: String
    registrationId: String
    workshopName: String
}

input AuthenticationInput {
    email: String
    password: String
}

input StudentInput {
    id: ID
    firstName: String
    lastName: String
    fullName: String
    age: Int
    dni: String
    email: String
    deleted: Boolean
}

input RegisterInput {
    firstName: String
    lastName: String
    email: String
    password: String
    role: String
}

input RepresentativeInput{
    id: ID
    name: String
    studentName: String
    deleted: Boolean
}
input SearchInput {
    term: String
    page: Int
    size: Int
}

input PaymentInput {
    studentId: String
    studentName: String
    amount: Float
    mode: String
}

input WorkshopInput {
    id: ID
    name: String
    schedule: [String]
    price: Float
    deleted: Boolean
}

input RegistrationInput {
    student: StudentInput
    workshopName: String
    schedule: String
}

input DueInput {
    studentId: String
    amount: Float
    name: String
    status: String
    creationDate: String
    dueDate: String
    registrationId: String
}

input UserInput {
    id: ID
    firstName: String
    lastName: String
    email: String
    role: String
}